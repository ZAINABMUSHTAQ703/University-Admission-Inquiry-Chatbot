# config.yml

recipe: default.v1
assistant_id: university-admission-chatbot-v2

language: en

pipeline:
  - name: WhitespaceTokenizer
  - name: RegexFeaturizer
  - name: LexicalSyntacticFeaturizer
  - name: CountVectorsFeaturizer
    analyzer: "word"
    min_ngram: 1
    max_ngram: 3
    stop_words: "english"
  - name: CountVectorsFeaturizer
    analyzer: "char_wb"
    min_ngram: 2
    max_ngram: 5
  - name: DIETClassifier
    epochs: 150
    constrain_similarities: true
    hidden_layers_sizes:
      text: [256, 192, 128]
    dropout: 0.2
    weight_sparsity: 0.8
    batch_size: [64, 256]
    learning_rate: 0.001
    # assistant_actions section is not typically needed here if FallbackClassifier/RulePolicy handle fallback
    # But if you want to explicitly define fallback for low NLU confidence before any policy kicks in,
    # you can use FallbackPolicy directly or rely on RulePolicy's nlu_threshold.

  - name: EntitySynonymMapper
  - name: ResponseSelector
    epochs: 100
  
  # FallbackClassifier is generally used to predict a fallback intent (e.g., 'nlu_fallback')
  # which then needs to be handled by a rule or story.
  # For direct action execution as fallback, RulePolicy's core_fallback_action_name is usually preferred.
  # You can keep it if you have rules/stories that specifically handle 'nlu_fallback' intent.
  - name: FallbackClassifier
    threshold: 0.25
    ambiguity_threshold: 0.1

  - name: LanguageModelFeaturizer
    model_name: "distilbert" # Uses 'distilbert-base-uncased'
    batch_size: 16

policies:
  - name: MemoizationPolicy
    max_history: 5
  
  - name: RulePolicy
    # This policy is crucial for your Gemini fallback.
    # It checks for explicit rules and also handles fallback situations.
    
    # core_fallback_threshold: If Rasa Core (story prediction) is not confident
    # enough about the next action AND no rule matches, this threshold triggers
    # core_fallback_action_name.
    core_fallback_threshold: 0.25 # Adjust based on how easily you want to fall back if no story matches.

    # ambiguity_threshold: If multiple rules are equally likely and ambiguous.
    ambiguity_threshold: 0.1

    # nlu_threshold: If the NLU model's confidence for the predicted intent
    # is below this, and no rule explicitly handles it, the fallback action *might*
    # be triggered depending on overall policy architecture.
    # For a robust NLU-based fallback, the FallbackPolicy is often used.
    # With core_fallback_action_name, this NLU threshold here primarily helps RulePolicy itself.
    nlu_threshold: 0.85 # Keep this high so NLU is quite confident for direct matches.

    # This is where your custom action is called as a fallback!
    # If core_fallback_threshold is met (no story/rule matches confidently),
    # this action will be executed.
    core_fallback_action_name: "action_gemini_fallback"
    
    # Enable fallback prediction allows the RulePolicy to predict a fallback action.
    enable_fallback_prediction: True

  # TEDPolicy is a powerful dialogue management policy.
  - name: TEDPolicy
    max_history: 5
    epochs: 150
    hidden_layers_sizes:
      text: [256, 192, 128]
    constrain_similarities: true
    dropout: 0.2
    learning_rate: 0.001
    batch_size: [64, 256]

  # UnexpecTEDIntentPolicy helps detect unexpected intents to guide conversation.
  - name: UnexpecTEDIntentPolicy
    max_history: 5
    epochs: 150
    hidden_layers_sizes:
      text: [256, 128]

  # Optional but Recommended: Explicit FallbackPolicy for NLU Confidence
  # While RulePolicy handles core_fallback_action_name,
  # a dedicated FallbackPolicy is often clearer for NLU confidence-based fallbacks.
  # If you add this, it will also call "action_gemini_fallback" when NLU confidence is low.
  # This makes the fallback more sensitive to NLU uncertainty.
  # If you use this, you might reconsider the nlu_threshold in RulePolicy,
  # or ensure its lower so FallbackPolicy can act first on NLU.
  # - name: FallbackPolicy
  #   nlu_threshold: 0.65 # If NLU confidence is below this, trigger fallback. Adjust as needed.
  #   core_threshold: 0.2 # If Core is very uncertain, trigger fallback.
  #   fallback_action_name: "action_gemini_fallback"

core:
  enable_api: true
  augmentation_factor: 20
  session_expiration_time: 60 # Session timeout in minutes